/*
 * Copyright (c) 2025 Florian Hehlen & Ã“scar Otero
 * All rights reserved.
 */

package org.js.vento.plugin.parser

import com.intellij.lang.ASTNode
import com.intellij.lang.PsiBuilder
import com.intellij.lang.PsiParser
import com.intellij.psi.tree.IElementType
import org.js.vento.plugin.VentoLanguage
import org.js.vento.plugin.lexer.LexerTypes
import org.js.vento.plugin.lexer.LexerTypes.BRACKET
import org.js.vento.plugin.lexer.LexerTypes.DOT
import org.js.vento.plugin.lexer.LexerTypes.EQUAL
import org.js.vento.plugin.lexer.LexerTypes.EXPRESSION
import org.js.vento.plugin.lexer.LexerTypes.IDENTIFIER
import org.js.vento.plugin.lexer.LexerTypes.PIPE_ELEMENT
import org.js.vento.plugin.lexer.LexerTypes.REGEX
import org.js.vento.plugin.lexer.LexerTypes.SET_CLOSE_END
import org.js.vento.plugin.lexer.LexerTypes.SET_CLOSE_KEY
import org.js.vento.plugin.lexer.LexerTypes.SET_CLOSE_START
import org.js.vento.plugin.lexer.LexerTypes.SET_END
import org.js.vento.plugin.lexer.LexerTypes.SET_KEY
import org.js.vento.plugin.lexer.LexerTypes.SET_START
import org.js.vento.plugin.lexer.LexerTypes.STRING
import org.js.vento.plugin.lexer.LexerTypes.UNKNOWN
import org.js.vento.plugin.parser.ParserTypes.SET_CLOSE_ELEMENT
import org.js.vento.plugin.parser.ParserTypes.SET_ELEMENT

/**
 * A parser implementation for Vento template files.
 *
 * This class is responsible for converting a sequence of tokens generated by
 * the VentoLexer into a structured Abstract Syntax Tree (AST) representation
 * by defining parsing rules for various elements in the Vento language.
 *
 * Primary functionality:
 * - Parses the root structure of a Vento template file and constructs the AST.
 * - Delegates parsing of specific elements, such as JavaScript blocks, to dedicated methods.
 *
 * Workflow:
 * 1. The `parse` method processes the entire file content.
 * 2. The parsing is done incrementally, processing each token in the file.
 * 3. Elements like JavaScript blocks or generic template elements are handled by corresponding methods.
 *
 * Key methods:
 * - `parse`: The entry point for parsing, iterates through the token stream and processes each token.
 * - `parseElement`: Handles parsing of individual elements in the structure.
 * - `parseJavaScriptElement`: Responsible for parsing blocks of JavaScript code embedded in the template.
 *
 * See also:
 * - `PsiParser` for IntelliJ IDEA's parsing handler interfaces.
 * - `VentoParserDefinition` for how this parser integrates with the IDE.
 * - `VentoJavaScriptInjector` for handling JavaScript code injection in parsed elements.
 */
class VentoParser : PsiParser {
    override fun parse(root: IElementType, builder: PsiBuilder): ASTNode {
        val rootMarker = builder.mark()

        while (!builder.eof()) {
            parseElement(builder)
        }

        rootMarker.done(root)
        return builder.treeBuilt
    }

    private fun parseElement(builder: PsiBuilder) {
        val tokenType = builder.tokenType
        builder.setDebugMode(true)
        when (tokenType) {
            LexerTypes.COMMENT_START, LexerTypes.TRIM_COMMENT_START -> parseCommentBlock(builder)
            LexerTypes.JAVASCRIPT_START -> parseJavaScript(builder)
            LexerTypes.VARIABLE_START -> parseVariable(builder)
            LexerTypes.FOR_START -> parseFor(builder)
            LexerTypes.IMPORT_START -> parseImport(builder)
            LexerTypes.EXPORT_START -> parseExport(builder)
            LexerTypes.EXPORT_CLOSE_START -> parseExportClose(builder)
            LexerTypes.EXPORT_FUNCTION_START -> parseExportFunction(builder)
            SET_START -> parsSet(builder)
            SET_CLOSE_START -> parsSetClose(builder)
            else -> {
                val marker = builder.mark()
                builder.advanceLexer()
                marker.done(ParserTypes.VENTO_ELEMENT)
            }
        }
    }

    private fun parsSetClose(builder: PsiBuilder) {
        val m = builder.mark()
        expect(builder, SET_CLOSE_START, "Expected '{{' ")
        expect(builder, SET_CLOSE_KEY, "Expected '/set' keyword")
        expect(builder, SET_CLOSE_END, "Expected '}}' ")
        m.done(SET_CLOSE_ELEMENT)
    }

    private fun parsSet(builder: PsiBuilder) {
        val m = builder.mark()

        expect(builder, SET_START, "Expected '{{' ")
        expect(builder, SET_KEY, "Expected 'set' keyword")
        expect(builder, IDENTIFIER, "Expected identifier")

        val hasEq = optional(builder, EQUAL, "Expected '=' keyword")

        val hasExp: Boolean = parseExpression(builder, hasEq)

        if (hasEq && !hasExp) builder.error("Expected expression after '='")
        if (!hasEq && hasExp) builder.error("Expected '='")

        parsePipe(builder)

        expect(builder, SET_END, "Expected '}}' ")

        m.done(SET_ELEMENT)
    }

    private fun parsePipe(builder: PsiBuilder) {
        if (builder.tokenType == PIPE_ELEMENT) {
            expect(builder, PIPE_ELEMENT, "Expected pipe (|>)")
            parseExpression(builder)
        }
    }

    private fun parseImport(builder: PsiBuilder) {
        val m = builder.mark()

        expect(builder, LexerTypes.IMPORT_START, "Expected '{{' ")
        expect(builder, LexerTypes.IMPORT_KEY, "Expected 'import' keyword")
        expect(builder, LexerTypes.IMPORT_VALUES, "Expected import values", true)
        expect(builder, LexerTypes.IMPORT_FROM, "Expected 'from' keyword")
        expect(builder, LexerTypes.IMPORT_FILE, "Expected vento(.vto) path string")
        expect(builder, LexerTypes.IMPORT_END, "Expected '}}' ")

        m.done(ParserTypes.IMPORT_ELEMENT)
    }

    private fun parseExport(builder: PsiBuilder) {
        val m = builder.mark()

        expect(builder, LexerTypes.EXPORT_START, "Expected '{{' ")
        expect(builder, LexerTypes.EXPORT_KEY, "Expected 'export' keyword")
        expect(builder, LexerTypes.EXPORT_VAR, "Expected variable", true)

        val hasEq = optional(builder, EQUAL, "Expected '=' keyword")
        var hasVal = false
        if (hasEq) hasVal = parseExpression(builder)
        if (hasEq && !hasVal) builder.error("Expected expression after '='")

        while (!builder.eof() && builder.tokenType == PIPE_ELEMENT) {
            val hasPipe = optional(builder, PIPE_ELEMENT, "Expected pipe (|>)")
            var hasPipeExpression = false
            if (hasPipe) hasPipeExpression = parseExpression(builder)
            if (hasPipe && !hasPipeExpression) builder.error("Expected expression after '|>'")
        }

        expect(builder, LexerTypes.EXPORT_END, "Expected '}}' ")

        if (hasEq) {
            m.done(ParserTypes.EXPORT_ELEMENT)
        } else {
            m.done(ParserTypes.EXPORT_OPEN_ELEMENT)
        }
    }

    private fun parseExpression(builder: PsiBuilder, required: Boolean = true): Boolean {
        val m = builder.mark()

        var hasExpression = false
        while (
            !builder.eof() &&
            (
                builder.tokenType == EXPRESSION ||
                    builder.tokenType == STRING ||
                    builder.tokenType == REGEX ||
                    builder.tokenType == BRACKET ||
                    builder.tokenType == DOT ||
                    builder.tokenType == IDENTIFIER ||
                    builder.tokenType == UNKNOWN
            )
        ) {
            if (builder.tokenType == UNKNOWN) {
                if (required) builder.error("Unexpected expression content")
            } else if (builder.tokenType == IDENTIFIER ||
                builder.tokenType == EXPRESSION ||
                builder.tokenType == STRING ||
                builder.tokenType == REGEX
            ) {
                hasExpression = true
            }
            builder.advanceLexer()
        }
        if (!hasExpression && required) builder.error("Expected expression")
        m.done(ParserTypes.EXPRESSION)

        return hasExpression
    }

    private fun parseExportClose(builder: PsiBuilder) {
        val m = builder.mark()

        expect(builder, LexerTypes.EXPORT_CLOSE_START, "Expected '{{/' ")
        expect(builder, LexerTypes.EXPORT_CLOSE_KEY, "Expected '/export' keyword")
        expect(builder, LexerTypes.EXPORT_CLOSE_END, "Expected '}}' ")

        m.done(ParserTypes.EXPORT_CLOSE_ELEMENT)
    }

    private fun parseExportFunction(builder: PsiBuilder) {
        val m = builder.mark()

        expect(builder, LexerTypes.EXPORT_FUNCTION_START, "Expected '{{' ")
        expect(builder, LexerTypes.EXPORT_KEY, "Expected 'export' keyword")
        expect(builder, LexerTypes.EXPORT_FUNCTION_KEY, "Expected 'function' keyword")
        expect(builder, LexerTypes.EXPORT_VAR, "Expected function name")
        expect(builder, LexerTypes.EXPORT_FUNCTION_ARGS, "Expected function arguments: (arg1[,arg2])", true)
        expect(builder, LexerTypes.EXPORT_FUNCTION_END, "Expected '}}' ")

        m.done(ParserTypes.EXPORT_FUNCTION_ELEMENT)
    }

    private fun parseFor(builder: PsiBuilder) {
        val m = builder.mark()
        builder.advanceLexer() // consume {{

        // Consume content tokens until we see the end or EOF
        while (
            !builder.eof() &&
            (
                builder.tokenType == LexerTypes.CLOSE_FOR_KEY ||
                    builder.tokenType == LexerTypes.FOR_KEY ||
                    builder.tokenType == LexerTypes.FOR_VALUE ||
                    builder.tokenType == LexerTypes.FOR_OF ||
                    builder.tokenType == LexerTypes.FOR_COLLECTION ||
                    builder.tokenType == LexerTypes.ERROR
            )
        ) {
            builder.advanceLexer()
        }

        if (builder.tokenType == LexerTypes.FOR_END) {
            builder.advanceLexer()
        }

        m.done(ParserTypes.VENTO_FOR_ELEMENT)
    }

    private fun parseVariable(builder: PsiBuilder) {
        val m = builder.mark()
        builder.advanceLexer() // consume {{ or {{-

        // Consume content tokens until we see the end or EOF
        while (
            !builder.eof() &&
            (
                builder.tokenType == LexerTypes.VARIABLE_ELEMENT ||
                    builder.tokenType == PIPE_ELEMENT ||
                    builder.tokenType == STRING ||
                    builder.tokenType == LexerTypes.ERROR ||
                    builder.tokenType == UNKNOWN
            )
        ) {
            if (builder.tokenType == LexerTypes.ERROR || builder.tokenType == UNKNOWN) {
                builder.error("Unexpected variable content")
            }
            builder.advanceLexer()
        }

        // Expect end
        if (builder.tokenType == LexerTypes.VARIABLE_END) {
            builder.advanceLexer()
        } else {
            builder.error("Unexpected variable content")
        }

        m.done(ParserTypes.JAVACRIPT_VARIABLE_ELEMENT)
    }

    private fun parseJavaScript(builder: PsiBuilder) {
        val marker = builder.mark()

        if (builder.tokenType == LexerTypes.JAVASCRIPT_START) {
            builder.advanceLexer()
        }

        if (builder.tokenType == ParserTypes.JAVASCRIPT_ELEMENT) {
            builder.advanceLexer()
        }

        if (builder.tokenType == LexerTypes.JAVASCRIPT_END) {
            builder.advanceLexer()
        }

        marker.done(ParserTypes.JAVASCRIPT_ELEMENT)
    }

    private fun parseCommentBlock(builder: PsiBuilder) {
        val marker = builder.mark()

        // Consume opening token
        builder.advanceLexer()

        // Consume content tokens
        while (!builder.eof() &&
            builder.tokenType == LexerTypes.COMMENT_CONTENT
        ) {
            builder.advanceLexer()
        }

        // Consume closing token if present
        if (builder.tokenType == LexerTypes.COMMENT_END ||
            builder.tokenType == LexerTypes.TRIM_COMMENT_END
        ) {
            builder.advanceLexer()
        }

        marker.done(ParserTypes.COMMENT_BLOCK)
    }
}

/**
 * Represents an element type for the Vento language.
 * Typically used for syntax/AST nodes in the PSI tree.
 */
class VentoParserElementType(debugName: String) : IElementType(debugName, VentoLanguage)

private fun expect(builder: PsiBuilder, expected: IElementType, message: String, expectMultipleTokens: Boolean = false): Boolean {
    return if (builder.tokenType == expected) {
        builder.advanceLexer()
        return if (expectMultipleTokens && builder.tokenType == expected) {
            expect(builder, expected, message, true)
        } else {
            true
        }
    } else {
        if (builder.tokenType == UNKNOWN) {
            builder.advanceLexer()
        }
        builder.error(message)
        false
    }
}

private fun optional(builder: PsiBuilder, expected: IElementType, message: String, expectMultipleTokens: Boolean = false): Boolean {
    return if (builder.tokenType == expected) {
        builder.advanceLexer()
        return if (expectMultipleTokens && builder.tokenType == expected) {
            expect(builder, expected, message, true)
        } else {
            true
        }
    } else {
        if (builder.tokenType == UNKNOWN) {
            builder.advanceLexer()
            builder.error(message)
            return false
        }
        false
    }
}
