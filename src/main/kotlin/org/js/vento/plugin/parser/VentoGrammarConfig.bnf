{
  parserClass="org.js.vento.plugin.parser.VentoParser"
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"
  psiClassPrefix="Vento"
  psiImplClassSuffix="Impl"
  psiPackage="org.js.vento.plugin.psi"
  psiImplPackage="org.js.vento.plugin.psi.impl"
  elementTypeHolderClass="org.js.vento.plugin.VentoTypes"
  elementTypeClass="org.js.vento.plugin.lexer.VentoElementType"
  tokenTypeClass="org.js.vento.plugin.VentoTokenType"
  
  tokens=[
    JAVASCRIPT_START='regexp:\{\{'
    JAVASCRIPT_END='regexp:\}\}'
    JAVASCRIPT_ELEMENT='regexp:[^}]+(}[^}])*'
    COMMENTED_START='regexp:\{\{#'
    COMMENTED_END='regexp:#\}\}'
    TRIMMED_COMMENTED_START='regexp:\{\{#-'
    TRIMMED_COMMENTED_END='regexp:-#\}\}'
    COMMENTED_CONTENT='regexp:[^-#{]+'
    ERROR='regexp:.'
  ]
}

ventoFile ::= item*

private item ::= javascriptBlock | commentBlock | ERROR

javascriptBlock ::= JAVASCRIPT_START JAVASCRIPT_ELEMENT JAVASCRIPT_END {
  pin=1
  mixin="org.js.vento.plugin.psi.VentoJavaScriptPsiElement"
}

commentBlock ::= (COMMENTED_START COMMENTED_CONTENT? COMMENTED_END) | 
                 (TRIMMED_COMMENTED_START COMMENTED_CONTENT? TRIMMED_COMMENTED_END) {
  pin=1
}

property ::= (KEY? SEPARATOR VALUE?) | KEY {
  pin=3
  recoverWhile="recover_property"
  mixin="org.intellij.sdk.language.psi.impl.SimpleNamedElementImpl"
  implements="org.intellij.sdk.language.psi.SimpleNamedElement"
  methods=[getKey getValue getName setName getNameIdentifier getPresentation]
}
private recover_property ::= !(KEY|SEPARATOR|COMMENT)


