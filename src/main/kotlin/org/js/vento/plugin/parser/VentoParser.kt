/*
 * Copyright (c) 2025 Florian Hehlen & Ã“scar Otero
 * All rights reserved.
 */

package org.js.vento.plugin.parser

import com.intellij.lang.ASTNode
import com.intellij.lang.PsiBuilder
import com.intellij.lang.PsiParser
import com.intellij.psi.tree.IElementType
import org.js.vento.plugin.lexer.VentoLexerTypes

/**
 * A parser implementation for Vento template files.
 *
 * This class is responsible for converting a sequence of tokens generated by
 * the VentoLexer into a structured Abstract Syntax Tree (AST) representation
 * by defining parsing rules for various elements in the Vento language.
 *
 * Primary functionality:
 * - Parses the root structure of a Vento template file and constructs the AST.
 * - Delegates parsing of specific elements, such as JavaScript blocks, to dedicated methods.
 *
 * Workflow:
 * 1. The `parse` method processes the entire file content.
 * 2. The parsing is done incrementally, processing each token in the file.
 * 3. Elements like JavaScript blocks or generic template elements are handled by corresponding methods.
 *
 * Key methods:
 * - `parse`: The entry point for parsing, iterates through the token stream and processes each token.
 * - `parseElement`: Handles parsing of individual elements in the structure.
 * - `parseJavaScriptElement`: Responsible for parsing blocks of JavaScript code embedded in the template.
 *
 * See also:
 * - `PsiParser` for IntelliJ IDEA's parsing handler interfaces.
 * - `VentoParserDefinition` for how this parser integrates with the IDE.
 * - `VentoJavaScriptInjector` for handling JavaScript code injection in parsed elements.
 */
class VentoParser : PsiParser {
    override fun parse(root: IElementType, builder: PsiBuilder): ASTNode {
        val rootMarker = builder.mark()

        while (!builder.eof()) {
            parseElement(builder)
        }

        rootMarker.done(root)
        return builder.treeBuilt
    }

    private fun parseElement(builder: PsiBuilder) {
        val tokenType = builder.tokenType

        when (tokenType) {
            VentoLexerTypes.OPEN_COMMENT_CLAUSE, VentoLexerTypes.OPEN_TRIM_COMMENT_CLAUSE -> parseCommentBlock(builder)
            VentoLexerTypes.JAVASCRIPT_START -> parseJavaScriptElement(builder)
            VentoLexerTypes.VARIABLE_START -> parseVariableElement(builder)
            else -> {
                val marker = builder.mark()
                builder.advanceLexer()
                marker.done(VentoParserTypes.VENTO_ELEMENT)
            }
        }
    }

    private fun parseVariableElement(builder: PsiBuilder) {
        val m = builder.mark()
        builder.advanceLexer() // consume {{ or {{-

        // Consume content tokens until we see the end or EOF
        while (!builder.eof() && builder.tokenType == VentoLexerTypes.VARIABLE_ELEMENT) {
            builder.advanceLexer()
        }

        // Expect end
        if (builder.tokenType == VentoLexerTypes.VARIABLE_END) {
            builder.advanceLexer()
        } else {
            builder.error("Expected '}}' to close variable")
        }

        m.done(VentoParserTypes.JAVACRIPT_VARIABLE_ELEMENT)
    }

    private fun parseJavaScriptElement(builder: PsiBuilder) {
        val marker = builder.mark()

        if (builder.tokenType == VentoLexerTypes.JAVASCRIPT_START) {
            builder.advanceLexer()
        }

        if (builder.tokenType == VentoParserTypes.JAVASCRIPT_ELEMENT) {
            builder.advanceLexer()
        }

        if (builder.tokenType == VentoLexerTypes.JAVASCRIPT_END) {
            builder.advanceLexer()
        }

        marker.done(VentoParserTypes.JAVASCRIPT_ELEMENT)
    }

    private fun parseCommentBlock(builder: PsiBuilder) {
        val marker = builder.mark()

        // Consume opening token
        builder.advanceLexer()

        // Consume content tokens
        while (!builder.eof() &&
            builder.tokenType == VentoLexerTypes.COMMENTED_CONTENT
        ) {
            builder.advanceLexer()
        }

        // Consume closing token if present
        if (builder.tokenType == VentoLexerTypes.CLOSE_COMMENT_CLAUSE ||
            builder.tokenType == VentoLexerTypes.CLOSE_TRIM_COMMENT_CLAUSE
        ) {
            builder.advanceLexer()
        }

        marker.done(VentoParserTypes.COMMENT_BLOCK)
    }
}
